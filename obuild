#!/usr/bin/env python

from __future__ import with_statement
import sys, os, re
from os.path import *
from collections import defaultdict

# optionally, set up the environment
ENVFILES = ['.obuild.env', os.path.expanduser('~/.obuild.env')]

for envfile in ENVFILES:
    if os.path.isfile(envfile):
        with open(envfile) as f:
            for line in f:      # e.g. "DBHOST=foobar"
                m = re.match(r'(\S*)\s*=\s*(\S*)', line)
                if m:
                    k, v = m.groups()
                    os.environ[k] = v

FILES  = [x for x in sys.argv[1:] if not x.startswith('-')]
OPTS   = ''.join([x[1:] for x in sys.argv[1:] if x.startswith('-')])

# options
FORCE  =     'f' in OPTS
LINK   = not 'c' in OPTS
NATIVE = not 'b' in OPTS
QUIET  =     'q' in OPTS

CMX = ('.cmx' if NATIVE else '.cmo')

CIML_SUPPORT = True
CIML_USED = {}

def debug(cmd):
    if not QUIET:
        print cmd

def object_of(fn):
    name, ext = splitext(fn)
    return name + CMX

def source_of(fn):
    name, ext = splitext(fn)
    return name + '.ml'

def interf_of(fn):
    name, ext = splitext(fn)
    return name + '.mli'

def directive(name, txt):
    m = re.search(r'\(\* ? %s (.*?) ?\*\)' % name, txt, re.MULTILINE)
    return m.group(1) if m else None

def preproc_of(srcfile):
    preproc = ''
    with open(srcfile) as f:
        txt = f.read()
    lang = directive('LANG', txt)
    if lang:
        preproc = pp_for_lang(lang)
        if CIML_SUPPORT:
            if 'pa_ciml' in lang:
                ciml_opts = directive('CIML', txt) or ''
                CIML_USED[srcfile] = ciml_opts
    return preproc

def pp_for_lang(lang):
    langs = lang.split(' ')
    if not langs:
        return ''
    else:
        local =  [x for x in langs if x.startswith('.')]
        system = [x for x in langs if not x.startswith('.')]
        out = ['-syntax camlp4o']
        if system:
            out.append('-package %s' % (','.join(system)))
        for x in local:
            out.append('-ppopt %s' % x)
        return ' '.join(out)
    

def deps_of(fn):
    src = source_of(fn)
    preproc = preproc_of(fn) or ''
    filt = '-native-filter' if NATIVE else '-bytecode-filter'
    cmd = 'ocamlfind ocamldep %s %s %s' % (filt, preproc, src)
    debug(cmd)
    with os.popen(cmd) as f:
        line = f.readline().strip()
    if not line:
        return []
    else:
        _deps = [x for x in line.split(':', 1)[1].split(' ') if x.strip()]
        return [x for x in [source_of(x.strip()) for x in _deps] if not x == fn]

def find_deps(fn):
    _deps = defaultdict(list)
    ob = object_of(fn)
    src = source_of(fn)
    deps = deps_of(src)
    _deps[fn].extend(deps)
    [find_deps(n) for n in deps]
    return _deps

def buildseq(deps):
    built = set()
    seq = []
    def inner(name):
        localdeps = deps.get(name, [])
        [inner(d) for d in localdeps]
        if not name in built:
            seq.append(name)
            built.add(name)
    [inner(n) for n in deps]
    return seq

def get_packages(srcfile):
    with open(srcfile) as f:
        txt = f.read()
    pkg = directive('PKG', txt)
    packages = pkg.split(' ') if pkg else []
    return packages

def newer(this, that):
    if isfile(this) and isfile(that):
        return os.stat(this).st_mtime > os.stat(that).st_mtime
    else:
        return True

def deps_newer(srcfile, deps):
    for d in deps[srcfile]:
        if newer(d, object_of(srcfile)):
            return True
    
def build(srcfile, deps):
    packages = get_packages(srcfile)
    pkg = ('-package ' + ','.join(packages)) if packages else ''
    preproc = preproc_of(srcfile)
    # deps_newer is to avoid 'inconsistent assumptions' errors.
    _opts = []
    if 'threads' in packages:
        _opts.append('-thread')
    opts = ' '.join(_opts)
    if FORCE or newer(srcfile, object_of(srcfile)) or deps_newer(srcfile, deps):
        cc = 'ocamlopt' if NATIVE else 'ocamlc'
        if isfile(interf_of(srcfile)):
            ifile = interf_of(srcfile)
            cmd = 'ocamlfind %(cc)s %(pkg)s -c %(ifile)s' % locals()
            debug(cmd)
            os.system(cmd)
        cmd = 'ocamlfind %(cc)s %(opts)s %(pkg)s %(preproc)s -c %(srcfile)s' % locals()
        debug(cmd)
        result = os.system(cmd)
        if result != 0:
            print 'Build error.'
            sys.exit(1)

def link(srcfile, seq, deps):
    packages = get_packages(srcfile)
    for d in deps[srcfile]:
        packages.extend(get_packages(d))
    packages = sorted(set(packages))
    pkg = ('-package ' + ','.join(packages)) if packages else ''
    exe = splitext(srcfile)[0]
    _objs = [o for o in [object_of(n) for n in seq] if not o.endswith('.cmi')]
    if CIML_SUPPORT:
        for x in _objs[:]:
            _src = source_of(x)
            if _src in CIML_USED:
                _ciml = splitext(_src)[0] + '_ciml.c'
                _objs.insert(0, _ciml)
                _objs.append(CIML_USED[_src])
        if srcfile in CIML_USED:
            _ciml = splitext(srcfile)[0] + '_ciml.c'
            _objs._insert(0, _ciml)
            _objs.append(CIML_USED[srcfile])
    objs = ' '.join(_objs)
    _opts = []
    if 'threads' in packages:
        _opts.append('-thread')
    opts = ' '.join(_opts)
    if any(newer(o, exe) for o in _objs):
        cc = 'ocamlopt' if NATIVE else 'ocamlc'
        cmd = 'ocamlfind %(cc)s %(opts)s -linkpkg %(pkg)s %(objs)s -o %(exe)s' % locals()
        debug(cmd)
        return os.system(cmd)

#----------------------------------------------------------------------

for fn in FILES:
    fn = source_of(fn)
    deps = find_deps(fn)
    seq = buildseq(deps)
    for s in seq:
        build(s, deps)
    if LINK:
        result = link(fn, seq, deps)
        if result:
           sys.exit(result) 
